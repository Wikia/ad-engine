{"version":3,"sources":["webpack://Wikia.adServices/webpack/bootstrap","webpack://Wikia.adServices/external {\"window\":[\"Wikia\",\"adEngine\"]}","webpack://Wikia.adServices/./node_modules/@babel/runtime/helpers/createClass.js","webpack://Wikia.adServices/./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack://Wikia.adServices/./node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack://Wikia.adServices/./node_modules/@babel/runtime/helpers/slicedToArray.js","webpack://Wikia.adServices/./src/ad-services/bill-the-lizard/executor.ts","webpack://Wikia.adServices/./src/ad-services/bill-the-lizard/projects-handler.ts","webpack://Wikia.adServices/./src/ad-services/bill-the-lizard/index.ts","webpack://Wikia.adServices/./src/ad-services/confiant/index.ts","webpack://Wikia.adServices/./src/ad-services/geo-edge/index.ts","webpack://Wikia.adServices/./src/ad-services/krux/index.ts","webpack://Wikia.adServices/./src/ad-services/moat-yi/index.ts","webpack://Wikia.adServices/./src/ad-services/nielsen/index.ts","webpack://Wikia.adServices/./src/ad-services/nielsen/static-queue-script.ts","webpack://Wikia.adServices/./src/ad-services/index.ts","webpack://Wikia.adServices/./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack://Wikia.adServices/./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack://Wikia.adServices/./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack://Wikia.adServices/./node_modules/@babel/runtime/helpers/nonIterableRest.js","webpack://Wikia.adServices/./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","webpack://Wikia.adServices/./node_modules/@babel/runtime/helpers/arrayWithHoles.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","window","_defineProperties","target","props","length","descriptor","writable","key","Constructor","protoProps","staticProps","instance","TypeError","arrayWithoutHoles","iterableToArray","nonIterableSpread","arr","arrayWithHoles","iterableToArrayLimit","nonIterableRest","Executor","classCallCheck_default","this","methods","createClass_default","callback","utils","logger","concat","methodName","model","prediction","Error","models","response","_this","keys","forEach","modelName","result","executableModel","find","executable","definedMethods","execute","ProjectsHandler","projects","projectNames","context","projectParameters","parameters","filter","isEnabled","includes","isNextModelExecutable","isProperGeo","countries","push","assign","logGroup","openRequests","httpRequest","host","endpoint","queryParameters","arguments","undefined","timeout","callId","request","XMLHttpRequest","query","params","encodeURI","join","buildQueryUrl","url","buildUrl","events","emit","BILL_THE_LIZARD_REQUEST","open","responseType","Promise","resolve","reject","addEventListener","onreadystatechange","readyState","status","send","registerEvent","BillTheLizard","executor","projectsHandler","targetedModelNames","Set","callCounter","predictions","statuses","req","abort","remove","_this$projectsHandler","getEnabledModelsWithParams","NOT_USED","dfp_targeting","add","now","Date","day","getDay","map","h","getHours","dow","getQueryParameters","TOO_LATE","catch","error","message","TIMEOUT","FAILURE","then","newValue","queryString","parseInt","overridePredictions","_this$predictions","ON_TIME","modelToResultMap","getModelToResultMap","buildPredictions","apply","toConsumableArray_default","setTargeting","BILL_THE_LIZARD_RESPONSE","serialize","executeMethods","targeting","getTargeting","serializedTargeting","entries","_ref","_ref2","slicedToArray_default","set","_this2","latestResults","pred","has","getPredictions","split","startId","callIdBuilder","backCounter","prevStatus","getResponseStatus","getPrediction","REUSED","billTheLizard","scriptDomain","confiant","propertyId","mapping","activation","_clrm","gpt","confiantCdn","sandbox","_len","args","Array","_key","confiantLibraryUrl","scriptLoader","loadScript","scriptDomainId","geoEdge","geoEdgeKey","geoEdgeConfig","grumi","cfg","geoEdgeLibraryUrl","getKruxData","localStorage","navigator","cookieEnabled","match","document","cookie","decodeURI","Krux","q","krux","kruxId","kruxLibraryUrl","id","exportPageParams","importUserData","user","segments","moatYi","moatYeildReadyResolve","promise","moatYieldReady","importPageParams","partnerCode","moatPrebidApi","getMoatTargetingForPage","pageParams","m_data","MOAT_YI_READY","nlsnConfig","createInstance","nielsenKey","t","nlsQ","e","createElement","async","src","location","protocol","getElementsByTagName","parentNode","insertBefore","g","ggPM","NOLBUNDLE","nielsen","Nielsen","nlsnInstance","nol_sdkDebug","nielsenMetadata","__webpack_exports__","bill_the_lizard_BillTheLizard","iter","Symbol","iterator","toString","from","isArray","arr2","_arr","_n","_d","_e","_s","_i","next","done","err"],"mappings":"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","file":"ad-services.global.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","(function() { module.exports = window[\"Wikia\"][\"adEngine\"]; }());","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","var arrayWithHoles = require(\"./arrayWithHoles\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit\");\n\nvar nonIterableRest = require(\"./nonIterableRest\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray;","import { utils } from '@wikia/ad-engine';\n\nconst logGroup = 'executor';\n\n/**\n * Bill the Lizard methods executor\n */\nexport class Executor {\n\tconstructor() {\n\t\tthis.methods = {};\n\t}\n\n\t/**\n\t * Registeres new method\n\t * @param {string} name\n\t * @param {function} callback\n\t */\n\tregister(name, callback) {\n\t\tutils.logger(logGroup, `method ${name} registered`);\n\t\tthis.methods[name] = callback;\n\t}\n\n\t/**\n\t * Executes method by name\n\t * @param {string} methodName\n\t * @param {ModelDefinition} model\n\t * @param {number|undefined} prediction\n\t */\n\texecute(methodName, model, prediction) {\n\t\tconst callback = this.methods[methodName];\n\n\t\tif (typeof callback !== 'function') {\n\t\t\tthrow Error(`${methodName} is not executable`);\n\t\t}\n\n\t\tutils.logger(logGroup, `executing ${methodName} method`, model.name, prediction);\n\t\tcallback(model, prediction);\n\t}\n\n\t/**\n\t * Executes all methods defined in given model based on service response\n\t * @param {ModelDefinition[]} models\n\t * @param {Object} response\n\t */\n\texecuteMethods(models, response) {\n\t\tObject.keys(response).forEach((modelName) => {\n\t\t\tconst { result } = response[modelName];\n\n\t\t\tconst executableModel = models.find((model) => model.name === modelName && model.executable);\n\n\t\t\tif (!executableModel) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst definedMethods = executableModel[`on_${result}`];\n\n\t\t\tif (!definedMethods) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdefinedMethods.forEach((methodName) => this.execute(methodName, executableModel, result));\n\t\t});\n\t}\n}\n","import { context, utils } from '@wikia/ad-engine';\n\nconst logGroup = 'project-handler';\n\n/**\n * Bill the Lizard projects handler\n */\nexport class ProjectsHandler {\n\tconstructor() {\n\t\tthis.projects = {};\n\t}\n\n\t/**\n\t * Enables project by name\n\t * @param {string} name\n\t */\n\tenable(name) {\n\t\tutils.logger(logGroup, `project ${name} enabled`);\n\t\tthis.projects[name] = true;\n\t}\n\n\t/**\n\t * Checks whether project is enabled\n\t * @param {string} name\n\t * @returns {boolean}\n\t */\n\tisEnabled(name) {\n\t\treturn !!this.projects[name];\n\t}\n\n\t/**\n\t * Returns all geo-enabled models' definitions based on enabled projects\n\t * @param {string[]} projectNames\n\t * @returns {{models: ModelDefinition[], parameters: Object}}\n\t */\n\tgetEnabledModelsWithParams(projectNames) {\n\t\tconst projects = context.get('services.billTheLizard.projects');\n\t\tconst projectParameters = context.get('services.billTheLizard.parameters');\n\t\tconst enabledProjectNames = Object.keys(projects).filter(\n\t\t\t(name) => this.isEnabled(name) && projectNames.includes(name),\n\t\t);\n\t\tconst models = [];\n\t\tconst parameters = {};\n\n\t\tenabledProjectNames.forEach((name) => {\n\t\t\t// Only first enabled model in project is executable\n\t\t\tlet isNextModelExecutable = true;\n\n\t\t\tprojects[name].forEach((model) => {\n\t\t\t\tif (utils.isProperGeo(model.countries, model.name)) {\n\t\t\t\t\tmodel.executable = isNextModelExecutable;\n\t\t\t\t\tisNextModelExecutable = false;\n\t\t\t\t\tmodels.push(model);\n\t\t\t\t\tObject.assign(parameters, projectParameters[name]);\n\t\t\t\t} else {\n\t\t\t\t\tmodel.executable = false;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn {\n\t\t\tmodels,\n\t\t\tparameters,\n\t\t};\n\t}\n}\n","import { context, events, utils } from '@wikia/ad-engine';\nimport { Executor } from './executor';\nimport { ProjectsHandler } from './projects-handler';\n\n/**\n * @typedef {Object} ModelDefinition\n * @property {boolean|undefined} executable\n * @property {string[]} countries\n * @property {string} name\n * @property {function} on_*\n */\n\n/**\n * @typedef {Object} PredictionDefinition\n * @property {string} modelName\n * @property {result} number\n * @property {(number|string)} callId\n */\n\nconst logGroup = 'bill-the-lizard';\nlet openRequests = [];\n\nevents.registerEvent('BILL_THE_LIZARD_REQUEST');\nevents.registerEvent('BILL_THE_LIZARD_RESPONSE');\n\n/**\n * Builds query parameters for url\n * @param {Object} queryParameters (key-value pairs for query parameters)\n * @returns {string}\n */\nfunction buildQueryUrl(queryParameters) {\n\tconst params = [];\n\n\tObject.keys(queryParameters).forEach((key) => {\n\t\tparams.push(`${key}=${queryParameters[key]}`);\n\t});\n\n\treturn encodeURI(params.join('&'));\n}\n\n/**\n * Builds endpoint url\n * @param {string} host\n * @param {string} endpoint\n * @param {string} query\n * @returns {string}\n */\nfunction buildUrl(host, endpoint, query) {\n\treturn `${host}/${endpoint}?${query}`;\n}\n\n/**\n * Requests service\n * @param {string} host\n * @param {string} endpoint\n * @param {Object} queryParameters (key-value pairs for query parameters)\n * @param {number} timeout\n * @param {number|string} callId\n * @returns {Promise}\n */\nfunction httpRequest(host, endpoint, queryParameters = {}, timeout = 0, callId) {\n\tconst request = new window.XMLHttpRequest();\n\tconst query = buildQueryUrl(queryParameters);\n\tconst url = buildUrl(host, endpoint, query);\n\n\tevents.emit(events.BILL_THE_LIZARD_REQUEST, {\n\t\tquery,\n\t\tcallId,\n\t});\n\n\trequest.open('GET', url, true);\n\trequest.responseType = 'json';\n\trequest.timeout = timeout;\n\n\topenRequests.push(request);\n\n\tutils.logger(logGroup, 'timeout configured to', request.timeout);\n\n\treturn new Promise((resolve, reject) => {\n\t\trequest.addEventListener('timeout', () => {\n\t\t\treject(new Error('timeout'));\n\t\t\tutils.logger(logGroup, 'timed out');\n\t\t});\n\t\trequest.addEventListener('error', () => {\n\t\t\treject(new Error('error'));\n\t\t\tutils.logger(logGroup, 'errored');\n\t\t});\n\t\trequest.onreadystatechange = function () {\n\t\t\tif (this.readyState === 4 && this.status === 200) {\n\t\t\t\tutils.logger(logGroup, 'has response');\n\t\t\t\tresolve(this.response);\n\t\t\t}\n\t\t};\n\t\trequest.send();\n\t});\n}\n\n/**\n * Builds key-value pairs for query parameters\n * @param {ModelDefinition[]} models\n * @param {Object} parameters (key-value pairs)\n * @returns {Object}\n */\nfunction getQueryParameters(models, parameters) {\n\tconst now = new Date();\n\tconst day = now.getDay() - 1;\n\n\treturn Object.assign(\n\t\t{},\n\t\t{\n\t\t\tmodels: models.map((model) => model.name),\n\t\t\th: now.getHours(),\n\t\t\tdow: day === -1 ? 6 : day,\n\t\t},\n\t\tparameters,\n\t);\n}\n\n/**\n * Overrides predictions based on response\n * @param {Object} response\n * @returns {Object}\n */\nfunction overridePredictions(response) {\n\tObject.keys(response).forEach((name) => {\n\t\tconst newValue = utils.queryString.get(`bill.${name}`);\n\n\t\tif (newValue) {\n\t\t\tresponse[name].result = parseInt(newValue, 10);\n\t\t}\n\t});\n\n\treturn response;\n}\n\n/**\n * Bill the Lizard service handler\n */\nexport class BillTheLizard {\n\tstatic FAILURE = 'failure';\n\tstatic NOT_USED = 'not_used';\n\tstatic ON_TIME = 'on_time';\n\tstatic TIMEOUT = 'timeout';\n\tstatic TOO_LATE = 'too_late';\n\tstatic REUSED = 'reused';\n\n\tconstructor() {\n\t\tthis.executor = new Executor();\n\t\tthis.projectsHandler = new ProjectsHandler();\n\t\tthis.targetedModelNames = new Set();\n\n\t\tthis.callCounter = 0;\n\t\tthis.predictions = [];\n\t\tthis.statuses = {};\n\t}\n\n\treset() {\n\t\tthis.callCounter = 0;\n\t\tthis.predictions = [];\n\t\tthis.statuses = {};\n\n\t\topenRequests.forEach((req) => req.abort());\n\t\topenRequests = [];\n\t\tcontext.remove('targeting.btl');\n\t}\n\n\t/**\n\t * Requests service, executes defined methods and parses response\n\t *\n\t * Supply callKey if you need to access status for this specific request.\n\t * DO NOT use an integer as callKey as it's the default value.\n\t * Good key example: \"incontent_boxad1\".\n\t *\n\t * @param {string[]} projectNames\n\t * @param {string} callId key for this call\n\t * @returns {Promise}\n\t */\n\tcall(projectNames, callId) {\n\t\tif (!context.get('services.billTheLizard.enabled')) {\n\t\t\tutils.logger(logGroup, 'disabled');\n\n\t\t\treturn new Promise((resolve, reject) => reject(new Error('Disabled')));\n\t\t}\n\n\t\tif (!callId) {\n\t\t\tthis.callCounter += 1;\n\t\t\tcallId = this.callCounter;\n\t\t}\n\n\t\tconst host = context.get('services.billTheLizard.host');\n\t\tconst endpoint = context.get('services.billTheLizard.endpoint');\n\t\tconst timeout = context.get('services.billTheLizard.timeout');\n\t\tconst { models, parameters } = this.projectsHandler.getEnabledModelsWithParams(projectNames);\n\n\t\tif (!models || models.length < 1) {\n\t\t\tutils.logger(logGroup, 'no models to predict');\n\t\t\tthis.statuses[callId] = BillTheLizard.NOT_USED;\n\n\t\t\treturn Promise.resolve({});\n\t\t}\n\n\t\t// update names of GAM targeted models\n\t\tmodels\n\t\t\t.filter((model) => model.dfp_targeting)\n\t\t\t.forEach((model) => this.targetedModelNames.add(model.name));\n\n\t\tconst queryParameters = getQueryParameters(models, parameters);\n\n\t\tutils.logger(logGroup, 'calling service', host, endpoint, queryParameters, `callId: ${callId}`);\n\n\t\tthis.statuses[callId] = BillTheLizard.TOO_LATE;\n\n\t\treturn httpRequest(host, endpoint, queryParameters, timeout, callId)\n\t\t\t.catch((error) => {\n\t\t\t\tif (error.message === 'timeout') {\n\t\t\t\t\tthis.statuses[callId] = BillTheLizard.TIMEOUT;\n\t\t\t\t} else {\n\t\t\t\t\tthis.statuses[callId] = BillTheLizard.FAILURE;\n\t\t\t\t}\n\n\t\t\t\treturn Promise.reject(error);\n\t\t\t})\n\t\t\t.then((response) => overridePredictions(response))\n\t\t\t.then((response) => {\n\t\t\t\tutils.logger(logGroup, 'service response OK', `callId: ${callId}`);\n\n\t\t\t\tthis.statuses[callId] = BillTheLizard.ON_TIME;\n\n\t\t\t\tconst modelToResultMap = this.getModelToResultMap(response);\n\n\t\t\t\tutils.logger(logGroup, 'predictions', modelToResultMap, `callId: ${callId}`);\n\n\t\t\t\tconst predictions = this.buildPredictions(models, modelToResultMap, callId);\n\n\t\t\t\tthis.predictions.push(...predictions);\n\n\t\t\t\tthis.setTargeting();\n\n\t\t\t\tevents.emit(events.BILL_THE_LIZARD_RESPONSE, {\n\t\t\t\t\tcallId,\n\t\t\t\t\tresponse: this.serialize(callId),\n\t\t\t\t});\n\n\t\t\t\tthis.executor.executeMethods(models, response);\n\n\t\t\t\treturn modelToResultMap;\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tutils.logger(logGroup, 'service response', error.message, `callId: ${callId}`);\n\n\t\t\t\treturn {};\n\t\t\t});\n\t}\n\n\t/**\n\t *\n\t * @param {ModelDefinition[]} models\n\t * @param {Object.<string, number>} modelToResultMap\n\t * @param {number|string} callId\n\t * @returns {PredictionDefinition[]}\n\t */\n\tbuildPredictions(models, modelToResultMap, callId) {\n\t\treturn models\n\t\t\t.map((model) => model.name)\n\t\t\t.filter((modelName) => modelToResultMap[modelName] !== undefined)\n\t\t\t.map((modelName) => ({ modelName, callId, result: modelToResultMap[modelName] }));\n\t}\n\n\t/**\n\t * Converts response to predictions\n\t * @param {Object} response\n\t * @returns {PredictionDefinition}\n\t */\n\tgetModelToResultMap(response) {\n\t\tconst modelToResultMap = {};\n\n\t\tObject.keys(response).forEach((modelName) => {\n\t\t\tconst { result } = response[modelName];\n\n\t\t\tif (typeof result !== 'undefined') {\n\t\t\t\tmodelToResultMap[modelName] = result;\n\t\t\t}\n\t\t});\n\n\t\treturn modelToResultMap;\n\t}\n\n\t/**\n\t * Sets DFP targeting in context.\n\t *\n\t * @returns string\n\t */\n\tsetTargeting() {\n\t\tconst targeting = this.getTargeting();\n\n\t\tif (Object.keys(targeting).length > 0) {\n\t\t\tconst serializedTargeting = Object.entries(targeting).map(\n\t\t\t\t([modelName, result]) => `${modelName}_${result}`,\n\t\t\t);\n\n\t\t\tcontext.set('targeting.btl', serializedTargeting);\n\n\t\t\treturn serializedTargeting;\n\t\t}\n\n\t\treturn '';\n\t}\n\n\t/**\n\t * Returns map of targeted models to their results.\n\t *\n\t * For each model, it takes the latest result.\n\t *\n\t * @returns {Object.<string, number>}\n\t */\n\tgetTargeting() {\n\t\tconst latestResults = {};\n\n\t\tthis.predictions\n\t\t\t.filter((pred) => this.targetedModelNames.has(pred.modelName))\n\t\t\t.forEach((pred) => {\n\t\t\t\tlatestResults[pred.modelName] = pred.result;\n\t\t\t});\n\n\t\treturn latestResults;\n\t}\n\n\t/**\n\t * Get prediction by modelName and callId.\n\t *\n\t * @param {string} modelName\n\t * @param {(number|string)} callId\n\t * @returns {PredictionDefinition}\n\t */\n\tgetPrediction(modelName, callId) {\n\t\treturn this.getPredictions(modelName).find((pred) => pred.callId === callId);\n\t}\n\n\t/**\n\t * Returns predictions optionally filtered by model name.\n\t *\n\t * If model name is given, it returns all predictions with models matching.\n\t * Model matches when raw name (without version) is matched.\n\t *\n\t * @param {string} [modelName]\n\t * @returns {PredictionDefinition[]}\n\t */\n\tgetPredictions(modelName) {\n\t\tconst separator = ':';\n\n\t\tif (modelName) {\n\t\t\treturn this.predictions.filter(\n\t\t\t\t(pred) => pred.modelName.split(separator)[0] === modelName.split(separator)[0],\n\t\t\t);\n\t\t}\n\n\t\treturn this.predictions;\n\t}\n\n\t/**\n\t * Returns response status (one of: failure, not_used, on_time, timeout, too_late or undefined);\n\t *\n\t * If callId is not supplied, the latest response without a specific key is returned.\n\t *\n\t * @param {number|string} [callId] value passed as key for call\n\t * @returns {string}\n\t */\n\tgetResponseStatus(callId) {\n\t\tcallId = callId || this.callCounter;\n\n\t\treturn this.statuses[callId];\n\t}\n\n\t/**\n\t * Serializes all predictions\n\t * @param {number|string} [callId]\n\t * @returns {string}\n\t */\n\tserialize(callId) {\n\t\tlet { predictions } = this;\n\n\t\tif (callId !== undefined) {\n\t\t\tpredictions = predictions.filter((pred) => pred.callId === callId);\n\t\t}\n\n\t\treturn predictions.map((pred) => `${pred.modelName}|${pred.callId}=${pred.result}`).join(',');\n\t}\n\n\t/**\n\t * Get prediction of previous calls.\n\t *\n\t * Uses a supplied callIdBuilder to construct callId\n\t * by iterating down from startId to 2.\n\t *\n\t * @param {number} startId\n\t * @param {function} callIdBuilder\n\t * @param {string} modelName\n\t * @returns {number | undefined}\n\t */\n\tgetPreviousPrediction(startId, callIdBuilder, modelName) {\n\t\tif (startId <= 1) {\n\t\t\treturn undefined;\n\t\t}\n\t\tfor (let backCounter = startId - 1; backCounter >= 1; backCounter--) {\n\t\t\tconst callId = callIdBuilder(backCounter);\n\t\t\tconst prevStatus = this.getResponseStatus(callId);\n\n\t\t\tif (prevStatus === BillTheLizard.ON_TIME || prevStatus === BillTheLizard.TOO_LATE) {\n\t\t\t\treturn this.getPrediction(modelName, callId);\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n\nexport const billTheLizard = new BillTheLizard();\n","import { context, utils } from '@wikia/ad-engine';\n\nconst logGroup = 'confiant';\nconst scriptDomain = 'clarium.global.ssl.fastly.net';\n\n/**\n * Injects Confiant script\n * @returns {Promise}\n */\nfunction loadScript() {\n\tconst confiantLibraryUrl = `//${scriptDomain}/gpt/a/wrap.js`;\n\n\treturn utils.scriptLoader.loadScript(confiantLibraryUrl, 'text/javascript', true, 'first');\n}\n\n/**\n * Confiant service handler\n */\nclass Confiant {\n\t/**\n\t * Requests service and injects script tag\n\t * @returns {Promise}\n\t */\n\tcall() {\n\t\tconst propertyId = context.get('services.confiant.propertyId');\n\t\tconst mapping = context.get('services.confiant.mapping');\n\t\tconst activation = context.get('services.confiant.activation');\n\n\t\tif (!context.get('services.confiant.enabled') || !propertyId || !mapping || !activation) {\n\t\t\tutils.logger(logGroup, 'disabled');\n\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tutils.logger(logGroup, 'loading');\n\n\t\t// eslint-disable-next-line  no-underscore-dangle\n\t\twindow._clrm = window._clrm || {};\n\t\t// eslint-disable-next-line  no-underscore-dangle\n\t\twindow._clrm.gpt = {\n\t\t\tpropertyId,\n\t\t\tconfiantCdn: scriptDomain,\n\t\t\tsandbox: 0,\n\t\t\tmapping,\n\t\t\tactivation,\n\t\t\tcallback: (...args) => {\n\t\t\t\tutils.logger(logGroup, args);\n\t\t\t},\n\t\t};\n\n\t\treturn loadScript().then(() => {\n\t\t\tutils.logger(logGroup, 'ready');\n\t\t});\n\t}\n}\n\nexport const confiant = new Confiant();\n","import { context, utils } from '@wikia/ad-engine';\n\nconst logGroup = 'geo-edge';\nconst scriptDomainId = 'd3b02estmut877';\n\n/**\n * Injects Geo Edge Site Side Protection script\n * @returns {Promise}\n */\nfunction loadScript() {\n\tconst geoEdgeLibraryUrl = `//${scriptDomainId}.cloudfront.net/grumi-ip.js`;\n\n\treturn utils.scriptLoader.loadScript(geoEdgeLibraryUrl, 'text/javascript', true, 'first');\n}\n\n/**\n * GeoEdge service handler\n */\nclass GeoEdge {\n\t/**\n\t * Requests service and injects script tag\n\t * @returns {Promise}\n\t */\n\tcall() {\n\t\tconst geoEdgeKey = context.get('services.geoEdge.id');\n\t\tconst geoEdgeConfig = context.get('services.geoEdge.config');\n\n\t\tif (!context.get('services.geoEdge.enabled') || !geoEdgeKey) {\n\t\t\tutils.logger(logGroup, 'disabled');\n\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tutils.logger(logGroup, 'loading');\n\t\twindow.grumi = {\n\t\t\tcfg: geoEdgeConfig,\n\t\t\tkey: geoEdgeKey,\n\t\t};\n\n\t\treturn loadScript().then(() => {\n\t\t\tutils.logger(logGroup, 'ready');\n\t\t});\n\t}\n}\n\nexport const geoEdge = new GeoEdge();\n","import { context, utils } from '@wikia/ad-engine';\n\nconst logGroup = 'krux';\n\n/**\n * Injects Krux script\n * @returns {Promise}\n */\nfunction loadScript() {\n\tconst kruxId = context.get('services.krux.id');\n\tconst kruxLibraryUrl = `//cdn.krxd.net/controltag?confid=${kruxId}`;\n\n\treturn utils.scriptLoader.loadScript(kruxLibraryUrl, 'text/javascript', true, 'first', {\n\t\tid: 'krux-control-tag',\n\t});\n}\n\n/**\n * Gets Krux data from localStorage\n * @param {string} key\n * @returns {string}\n */\nfunction getKruxData(key) {\n\tif (window.localStorage) {\n\t\treturn window.localStorage[key];\n\t}\n\tif (window.navigator.cookieEnabled) {\n\t\tconst match = document.cookie.match(`${key}=([^;]*)`);\n\n\t\treturn (match && decodeURI(match[1])) || '';\n\t}\n\n\treturn '';\n}\n\nwindow.Krux =\n\twindow.Krux ||\n\tfunction (...args) {\n\t\twindow.Krux.q.push(args);\n\t};\nwindow.Krux.q = window.Krux.q || [];\n\n/**\n * Krux service handler\n */\nclass Krux {\n\t/**\n\t * Requests service, saves user id and segments in context and exports page level params\n\t * @returns {Promise}\n\t */\n\tcall() {\n\t\tif (!context.get('services.krux.enabled') || !context.get('options.trackingOptIn')) {\n\t\t\tutils.logger(logGroup, 'disabled');\n\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tutils.logger(logGroup, 'loading');\n\n\t\treturn loadScript().then(() => {\n\t\t\tthis.exportPageParams();\n\t\t\tthis.importUserData();\n\t\t});\n\t}\n\n\t/**\n\t * Export page level params to Krux\n\t * @returns {void}\n\t */\n\texportPageParams() {\n\t\tObject.keys(context.get('targeting')).forEach((key) => {\n\t\t\tconst value = context.get(`targeting.${key}`);\n\n\t\t\tif (value) {\n\t\t\t\twindow[`kruxDartParam_${key}`] = value;\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Imports Krux data from localStorage\n\t * @returns {void}\n\t */\n\timportUserData() {\n\t\tconst user = getKruxData('kxuser') || getKruxData('kxwikia_user');\n\t\tconst segments = getKruxData('kxsegs') || getKruxData('kxwikia_segs');\n\n\t\tcontext.set('targeting.kuid', user || null);\n\t\tcontext.set('targeting.ksg', segments ? segments.split(',') : []);\n\t\tutils.logger(logGroup, 'data set', user, segments);\n\t}\n\n\t/**\n\t * Returns Krux user ID\n\t * @returns {string}\n\t */\n\tgetUserId() {\n\t\treturn context.get('targeting.kuid') || null;\n\t}\n\n\t/**\n\t * Returns Krux segments\n\t * @returns {string[]}\n\t */\n\tgetSegments() {\n\t\treturn context.get('targeting.ksg') || [];\n\t}\n}\n\nexport const krux = new Krux();\n","import { context, events, utils } from '@wikia/ad-engine';\n\nconst logGroup = 'moat-yi';\n\nevents.registerEvent('MOAT_YI_READY');\n\n/**\n * Injects MOAT YI script\n * @returns {Promise}\n */\nfunction loadScript() {\n\tconst partnerCode = context.get('services.moatYi.partnerCode');\n\tconst url = `//z.moatads.com/${partnerCode}/yi.js`;\n\n\treturn utils.scriptLoader.loadScript(url, 'text/javascript', true, 'first');\n}\n\n/**\n * MOAT YI service handler\n */\nclass MoatYi {\n\t/**\n\t * Requests MOAT YI service and saves page level data in targeting\n\t * @returns {Promise}\n\t */\n\tcall() {\n\t\tif (!context.get('services.moatYi.enabled') || !context.get('services.moatYi.partnerCode')) {\n\t\t\tutils.logger(logGroup, 'disabled');\n\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tlet moatYeildReadyResolve;\n\t\tconst promise = new Promise((resolve) => {\n\t\t\tmoatYeildReadyResolve = resolve;\n\t\t});\n\n\t\tutils.logger(logGroup, 'loading');\n\t\twindow.moatYieldReady = () => {\n\t\t\tthis.importPageParams();\n\t\t\tmoatYeildReadyResolve();\n\t\t};\n\t\tcontext.set('targeting.m_data', 'waiting');\n\n\t\tloadScript().then(() => {\n\t\t\tutils.logger(logGroup, 'ready');\n\t\t});\n\n\t\treturn promise;\n\t}\n\n\t/**\n\t * Adds page params to targeting\n\t * @returns {void}\n\t */\n\timportPageParams() {\n\t\tif (\n\t\t\twindow.moatPrebidApi &&\n\t\t\ttypeof window.moatPrebidApi.getMoatTargetingForPage === 'function'\n\t\t) {\n\t\t\tconst pageParams = window.moatPrebidApi.getMoatTargetingForPage() || {};\n\n\t\t\tcontext.set('targeting.m_data', pageParams.m_data);\n\t\t\tevents.emit(events.MOAT_YI_READY, `m_data=${pageParams.m_data}`);\n\t\t\tutils.logger(logGroup, 'moatYieldReady', pageParams);\n\t\t}\n\t}\n}\n\nexport const moatYi = new MoatYi();\n","/* global NOLBUNDLE */\nimport { context, utils } from '@wikia/ad-engine';\nimport { initNielsenStaticQueue } from './static-queue-script';\n\nconst logGroup = 'nielsen-dcr';\nconst nlsnConfig = {};\n\n/**\n * Creates Nielsen Static Queue Snippet\n */\nfunction createInstance(nielsenKey) {\n\tutils.logger(logGroup, 'loading');\n\n\tinitNielsenStaticQueue();\n\n\treturn NOLBUNDLE.nlsQ(nielsenKey, 'nlsnInstance', nlsnConfig);\n}\n\n/**\n * Nielsen service handler\n */\nclass Nielsen {\n\t/**\n\t * Class constructor\n\t */\n\tconstructor() {\n\t\tthis.nlsnInstance = null;\n\n\t\tif (utils.queryString.get('nielsen-dcr-debug') === '1') {\n\t\t\tnlsnConfig.nol_sdkDebug = 'debug';\n\t\t}\n\t}\n\n\t/**\n\t * Create Nielsen Static Queue and make a call\n\t * @param {Object} nielsenMetadata\n\t * @returns {Object}\n\t */\n\tcall(nielsenMetadata) {\n\t\tconst nielsenKey = context.get('services.nielsen.appId');\n\n\t\tif (!context.get('services.nielsen.enabled') || !nielsenKey) {\n\t\t\tutils.logger(logGroup, 'disabled');\n\n\t\t\treturn null;\n\t\t}\n\n\t\tif (!this.nlsnInstance) {\n\t\t\tthis.nlsnInstance = createInstance(nielsenKey);\n\t\t}\n\n\t\tutils.logger(logGroup, 'ready');\n\n\t\tthis.nlsnInstance.ggPM('staticstart', nielsenMetadata);\n\n\t\tutils.logger(logGroup, 'called', nielsenMetadata);\n\n\t\treturn this.nlsnInstance;\n\t}\n}\n\nexport const nielsen = new Nielsen();\n","// NIELSEN CODE START\n// eslint-disable-next-line\nexport function initNielsenStaticQueue(){!function(t,n){t[n]=t[n]||{nlsQ:function(e,o,c,r,s,i){return s=t.document,r=s.createElement(\"script\"),r.async=1,r.src=(\"http:\"===t.location.protocol?\"http:\":\"https:\")+\"//cdn-gl.imrworldwide.com/conf/\"+e+\".js#name=\"+o+\"&ns=\"+n,i=s.getElementsByTagName(\"script\")[0],i.parentNode.insertBefore(r,i),t[n][o]=t[n][o]||{g:c||{},ggPM:function(e,c,r,s,i){(t[n][o].q=t[n][o].q||[]).push([e,c,r,s,i])}},t[n][o]}}}(window,\"NOLBUNDLE\");}\n// NIELSEN CODE END\n","export * from './bill-the-lizard';\nexport * from './confiant';\nexport * from './geo-edge';\nexport * from './krux';\nexport * from './moat-yi';\nexport * from './nielsen';\n","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nmodule.exports = _nonIterableSpread;","function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nmodule.exports = _arrayWithoutHoles;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nmodule.exports = _nonIterableRest;","function _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit;","function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles;"],"sourceRoot":""}