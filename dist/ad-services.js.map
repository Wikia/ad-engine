{"version":3,"sources":["webpack://adEngine/webpack/bootstrap","webpack://adEngine/external \"@wikia/ad-engine\"","webpack://adEngine/external \"babel-runtime/helpers/createClass\"","webpack://adEngine/external \"babel-runtime/helpers/classCallCheck\"","webpack://adEngine/external \"babel-runtime/core-js/promise\"","webpack://adEngine/external \"babel-runtime/core-js/object/keys\"","webpack://adEngine/external \"babel-runtime/core-js/object/assign\"","webpack://adEngine/external \"babel-runtime/core-js/set\"","webpack://adEngine/external \"babel-runtime/helpers/toConsumableArray\"","webpack://adEngine/external \"babel-runtime/core-js/object/entries\"","webpack://adEngine/external \"babel-runtime/helpers/slicedToArray\"","webpack://adEngine/./src/ad-services/bill-the-lizard/executor.js","webpack://adEngine/./src/ad-services/bill-the-lizard/projects-handler.js","webpack://adEngine/./src/ad-services/bill-the-lizard/index.js","webpack://adEngine/./src/ad-services/geo-edge/index.js","webpack://adEngine/./src/ad-services/krux/index.js","webpack://adEngine/./src/ad-services/moat-yi/index.js","webpack://adEngine/./src/ad-services/index.js"],"names":["logGroup","methods","name","callback","utils","logger","methodName","model","prediction","Error","models","response","forEach","modelName","result","executableModel","find","executable","definedMethods","execute","projects","projectNames","context","get","projectParameters","enabledProjectNames","filter","isEnabled","includes","parameters","isNextModelExecutable","isProperGeo","countries","push","events","registerEvent","buildQueryUrl","queryParameters","params","key","encodeURI","join","buildUrl","host","endpoint","query","httpRequest","timeout","callId","request","window","XMLHttpRequest","url","emit","BILL_THE_LIZARD_REQUEST","open","responseType","resolve","reject","addEventListener","onreadystatechange","readyState","status","send","getQueryParameters","now","Date","day","getDay","map","h","getHours","dow","overridePredictions","newValue","queryString","parseInt","executor","projectsHandler","statuses","predictions","callCounter","targetedModelNames","getEnabledModelsWithParams","length","BillTheLizard","NOT_USED","dfp_targeting","add","TOO_LATE","catch","error","message","TIMEOUT","FAILURE","then","ON_TIME","modelToResultMap","getModelToResultMap","buildPredictions","setTargeting","BILL_THE_LIZARD_RESPONSE","serialize","executeMethods","undefined","targeting","getTargeting","serializedTargeting","set","latestResults","has","pred","getPredictions","separator","split","billTheLizard","scriptDomainId","loadScript","geoEdgeLibraryUrl","scriptLoader","geoEdgeKey","geoEdgeConfig","grumi","cfg","geoEdge","kruxId","kruxLibraryUrl","id","getKruxData","localStorage","navigator","cookieEnabled","match","document","cookie","decodeURI","Krux","args","q","exportPageParams","importUserData","value","user","segments","krux","partnerCode","moatYeildReadyResolve","promise","moatYieldReady","importPageParams","moatPrebidApi","getMoatTargetingForPage","pageParams","m_data","MOAT_YI_READY","moatYi"],"mappings":"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","file":"ad-services.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 10);\n","module.exports = require(\"@wikia/ad-engine\");","module.exports = require(\"babel-runtime/helpers/createClass\");","module.exports = require(\"babel-runtime/helpers/classCallCheck\");","module.exports = require(\"babel-runtime/core-js/promise\");","module.exports = require(\"babel-runtime/core-js/object/keys\");","module.exports = require(\"babel-runtime/core-js/object/assign\");","module.exports = require(\"babel-runtime/core-js/set\");","module.exports = require(\"babel-runtime/helpers/toConsumableArray\");","module.exports = require(\"babel-runtime/core-js/object/entries\");","module.exports = require(\"babel-runtime/helpers/slicedToArray\");","import { utils } from '@wikia/ad-engine';\n\nconst logGroup = 'executor';\n\n/**\n * Bill the Lizard methods executor\n */\nexport class Executor {\n\tconstructor() {\n\t\tthis.methods = {};\n\t}\n\n\t/**\n\t * Registeres new method\n\t * @param {string} name\n\t * @param {function} callback\n\t */\n\tregister(name, callback) {\n\t\tutils.logger(logGroup, `method ${name} registered`);\n\t\tthis.methods[name] = callback;\n\t}\n\n\t/**\n\t * Executes method by name\n\t * @param {string} methodName\n\t * @param {ModelDefinition} model\n\t * @param {number|undefined} prediction\n\t */\n\texecute(methodName, model, prediction) {\n\t\tconst callback = this.methods[methodName];\n\n\t\tif (typeof callback !== 'function') {\n\t\t\tthrow Error(`${methodName} is not executable`);\n\t\t}\n\n\t\tutils.logger(logGroup, `executing ${methodName} method`, model.name, prediction);\n\t\tcallback(model, prediction);\n\t}\n\n\t/**\n\t * Executes all methods defined in given model based on service response\n\t * @param {ModelDefinition[]} models\n\t * @param {Object} response\n\t */\n\texecuteMethods(models, response) {\n\t\tObject.keys(response).forEach((modelName) => {\n\t\t\tconst { result } = response[modelName];\n\n\t\t\tconst executableModel = models.find(model => model.name === modelName && model.executable);\n\t\t\tif (!executableModel) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst definedMethods = executableModel[`on_${result}`];\n\t\t\tif (!definedMethods) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdefinedMethods.forEach(methodName => this.execute(methodName, executableModel, result));\n\t\t});\n\t}\n}\n","import { context, utils } from '@wikia/ad-engine';\n\nconst logGroup = 'project-handler';\n\n/**\n * Bill the Lizard projects handler\n */\nexport class ProjectsHandler {\n\tconstructor() {\n\t\tthis.projects = {};\n\t}\n\n\t/**\n\t * Enables project by name\n\t * @param {string} name\n\t */\n\tenable(name) {\n\t\tutils.logger(logGroup, `project ${name} enabled`);\n\t\tthis.projects[name] = true;\n\t}\n\n\t/**\n\t * Checks whether project is enabled\n\t * @param {string} name\n\t * @returns {boolean}\n\t */\n\tisEnabled(name) {\n\t\treturn !!this.projects[name];\n\t}\n\n\t/**\n\t * Returns all geo-enabled models' definitions based on enabled projects\n\t * @param {string[]} projectNames\n\t * @returns {{models: ModelDefinition[], parameters: Object}}\n\t */\n\tgetEnabledModelsWithParams(projectNames) {\n\t\tconst projects = context.get('services.billTheLizard.projects');\n\t\tconst projectParameters = context.get('services.billTheLizard.parameters');\n\t\tconst enabledProjectNames = Object.keys(projects)\n\t\t\t.filter(name => (this.isEnabled(name) && projectNames.includes(name)));\n\t\tconst models = [];\n\t\tconst parameters = {};\n\n\t\tenabledProjectNames.forEach((name) => {\n\t\t\t// Only first enabled model in project is executable\n\t\t\tlet isNextModelExecutable = true;\n\n\t\t\tprojects[name].forEach((model) => {\n\t\t\t\tif (utils.isProperGeo(model.countries, model.name)) {\n\t\t\t\t\tmodel.executable = isNextModelExecutable;\n\t\t\t\t\tisNextModelExecutable = false;\n\t\t\t\t\tmodels.push(model);\n\t\t\t\t\tObject.assign(parameters, projectParameters[name]);\n\t\t\t\t} else {\n\t\t\t\t\tmodel.executable = false;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn {\n\t\t\tmodels,\n\t\t\tparameters\n\t\t};\n\t}\n}\n","import { context, events, utils } from '@wikia/ad-engine';\nimport { Executor } from './executor';\nimport { ProjectsHandler } from './projects-handler';\n\n/**\n * @typedef {Object} ModelDefinition\n * @property {boolean|undefined} executable\n * @property {string[]} countries\n * @property {string} name\n * @property {function} on_*\n */\n\n/**\n * @typedef {Object} PredictionDefinition\n * @property {string} modelName\n * @property {result} number\n * @property {(number|string)} callId\n */\n\nconst logGroup = 'bill-the-lizard';\n\nevents.registerEvent('BILL_THE_LIZARD_REQUEST');\nevents.registerEvent('BILL_THE_LIZARD_RESPONSE');\n\n/**\n * Builds query parameters for url\n * @param {Object} queryParameters (key-value pairs for query parameters)\n * @returns {string}\n */\nfunction buildQueryUrl(queryParameters) {\n\tconst params = [];\n\n\tObject.keys(queryParameters).forEach((key) => {\n\t\tparams.push(`${key}=${queryParameters[key]}`);\n\t});\n\n\treturn encodeURI(params.join('&'));\n}\n\n/**\n * Builds endpoint url\n * @param {string} host\n * @param {string} endpoint\n * @param {string} query\n * @returns {string}\n */\nfunction buildUrl(host, endpoint, query) {\n\treturn `${host}/${endpoint}?${query}`;\n}\n\n/**\n * Requests service\n * @param {string} host\n * @param {string} endpoint\n * @param {Object} queryParameters (key-value pairs for query parameters)\n * @param {number} timeout\n * @param {number|string} callId\n * @returns {Promise}\n */\nfunction httpRequest(host, endpoint, queryParameters = {}, timeout = 0, callId) {\n\tconst request = new window.XMLHttpRequest();\n\tconst query = buildQueryUrl(queryParameters);\n\tconst url = buildUrl(host, endpoint, query);\n\n\tevents.emit(events.BILL_THE_LIZARD_REQUEST, {\n\t\tquery,\n\t\tcallId,\n\t});\n\n\trequest.open('GET', url, true);\n\trequest.responseType = 'json';\n\trequest.timeout = timeout;\n\n\tutils.logger(logGroup, 'timeout configured to', request.timeout);\n\n\treturn new Promise((resolve, reject) => {\n\t\trequest.addEventListener('timeout', () => {\n\t\t\treject(new Error('timeout'));\n\t\t\tutils.logger(logGroup, 'timed out');\n\t\t});\n\t\trequest.addEventListener('error', () => {\n\t\t\treject(new Error('error'));\n\t\t\tutils.logger(logGroup, 'errored');\n\t\t});\n\t\trequest.onreadystatechange = function () {\n\t\t\tif (this.readyState === 4 && this.status === 200) {\n\t\t\t\tutils.logger(logGroup, 'has response');\n\t\t\t\tresolve(this.response);\n\t\t\t}\n\t\t};\n\t\trequest.send();\n\t});\n}\n\n/**\n * Builds key-value pairs for query parameters\n * @param {ModelDefinition[]} models\n * @param {Object} parameters (key-value pairs)\n * @returns {Object}\n */\nfunction getQueryParameters(models, parameters) {\n\tconst now = new Date();\n\tconst day = now.getDay() - 1;\n\n\treturn Object.assign({}, {\n\t\tmodels: models.map(model => model.name),\n\t\th: now.getHours(),\n\t\tdow: day === -1 ? 6 : day\n\t}, parameters);\n}\n\n/**\n * Overrides predictions based on response\n * @param {Object} response\n * @returns {Object}\n */\nfunction overridePredictions(response) {\n\tObject.keys(response).forEach((name) => {\n\t\tconst newValue = utils.queryString.get(`bill.${name}`);\n\n\t\tif (newValue) {\n\t\t\tresponse[name].result = parseInt(newValue, 10);\n\t\t}\n\t});\n\n\treturn response;\n}\n\n/**\n * Bill the Lizard service handler\n */\nexport class BillTheLizard {\n\tstatic FAILURE = 'failure';\n\tstatic NOT_USED = 'not_used';\n\tstatic ON_TIME = 'on_time';\n\tstatic TIMEOUT = 'timeout';\n\tstatic TOO_LATE = 'too_late';\n\n\tconstructor() {\n\t\tthis.executor = new Executor();\n\t\tthis.projectsHandler = new ProjectsHandler();\n\t\tthis.statuses = {};\n\t\tthis.predictions = [];\n\t\tthis.callCounter = 0;\n\t\tthis.targetedModelNames = new Set();\n\t}\n\n\t/**\n\t * Requests service, executes defined methods and parses response\n\t *\n\t * Supply callKey if you need to access status for this specific request.\n\t * DO NOT use an integer as callKey as it's the default value.\n\t * Good key example: \"incontent_boxad1\".\n\t *\n\t * @param {string[]} projectNames\n\t * @param {string} callId key for this call\n\t * @returns {Promise}\n\t */\n\tcall(projectNames, callId) {\n\t\tif (!context.get('services.billTheLizard.enabled')) {\n\t\t\tutils.logger(logGroup, 'disabled');\n\t\t\treturn new Promise((resolve, reject) => reject(new Error('Disabled')));\n\t\t}\n\n\t\tif (!callId) {\n\t\t\tthis.callCounter += 1;\n\t\t\tcallId = this.callCounter;\n\t\t}\n\n\t\tconst host = context.get('services.billTheLizard.host');\n\t\tconst endpoint = context.get('services.billTheLizard.endpoint');\n\t\tconst timeout = context.get('services.billTheLizard.timeout');\n\t\tconst { models, parameters } = this.projectsHandler.getEnabledModelsWithParams(projectNames);\n\n\t\tif (!models || models.length < 1) {\n\t\t\tutils.logger(logGroup, 'no models to predict');\n\t\t\tthis.statuses[callId] = BillTheLizard.NOT_USED;\n\n\t\t\treturn Promise.resolve({});\n\t\t}\n\n\t\t// update names of GAM targeted models\n\t\tmodels\n\t\t\t.filter(model => model.dfp_targeting)\n\t\t\t.forEach(model => this.targetedModelNames.add(model.name));\n\n\t\tconst queryParameters = getQueryParameters(models, parameters);\n\t\tutils.logger(logGroup, 'calling service', host, endpoint, queryParameters, `callId: ${callId}`);\n\n\t\tthis.statuses[callId] = BillTheLizard.TOO_LATE;\n\n\t\treturn httpRequest(host, endpoint, queryParameters, timeout, callId)\n\t\t\t.catch((error) => {\n\t\t\t\tif (error.message === 'timeout') {\n\t\t\t\t\tthis.statuses[callId] = BillTheLizard.TIMEOUT;\n\t\t\t\t} else {\n\t\t\t\t\tthis.statuses[callId] = BillTheLizard.FAILURE;\n\t\t\t\t}\n\t\t\t\treturn Promise.reject(error);\n\t\t\t})\n\t\t\t.then(response => overridePredictions(response))\n\t\t\t.then((response) => {\n\t\t\t\tutils.logger(logGroup, 'service response OK', `callId: ${callId}`);\n\n\t\t\t\tthis.statuses[callId] = BillTheLizard.ON_TIME;\n\n\t\t\t\tconst modelToResultMap = this.getModelToResultMap(response);\n\t\t\t\tutils.logger(logGroup, 'predictions', modelToResultMap, `callId: ${callId}`);\n\n\t\t\t\tconst predictions = this.buildPredictions(models, modelToResultMap, callId);\n\t\t\t\tthis.predictions.push(...predictions);\n\n\t\t\t\tthis.setTargeting();\n\n\t\t\t\tevents.emit(events.BILL_THE_LIZARD_RESPONSE, {\n\t\t\t\t\tcallId,\n\t\t\t\t\tresponse: this.serialize(callId),\n\t\t\t\t});\n\n\t\t\t\tthis.executor.executeMethods(models, response);\n\n\t\t\t\treturn modelToResultMap;\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tutils.logger(logGroup, 'service response', error.message, `callId: ${callId}`);\n\t\t\t\treturn {};\n\t\t\t});\n\t}\n\n\t/**\n\t *\n\t * @param {ModelDefinition[]} models\n\t * @param {Object.<string, number>} modelToResultMap\n\t * @param {number|string} callId\n\t * @returns {PredictionDefinition[]}\n\t */\n\tbuildPredictions(models, modelToResultMap, callId) {\n\t\treturn models\n\t\t\t.map(model => model.name)\n\t\t\t.filter(modelName => modelToResultMap[modelName] !== undefined)\n\t\t\t.map(modelName => ({ modelName, callId, result: modelToResultMap[modelName] }));\n\t}\n\n\t/**\n\t * Converts response to predictions\n\t * @param {Object} response\n\t * @returns {PredictionDefinition}\n\t */\n\tgetModelToResultMap(response) {\n\t\tconst modelToResultMap = {};\n\t\tObject.keys(response).forEach((modelName) => {\n\t\t\tconst { result } = response[modelName];\n\n\t\t\tif (typeof result !== 'undefined') {\n\t\t\t\tmodelToResultMap[modelName] = result;\n\t\t\t}\n\t\t});\n\t\treturn modelToResultMap;\n\t}\n\n\t/**\n\t * Sets DFP targeting in context.\n\t *\n\t * @returns string\n\t */\n\tsetTargeting() {\n\t\tconst targeting = this.getTargeting();\n\t\tif (Object.keys(targeting).length > 0) {\n\t\t\tconst serializedTargeting = Object.entries(targeting)\n\t\t\t\t.map(([modelName, result]) => `${modelName}_${result}`);\n\t\t\tcontext.set('targeting.btl', serializedTargeting);\n\t\t\treturn serializedTargeting;\n\t\t}\n\t\treturn '';\n\t}\n\n\t/**\n\t * Returns map of targeted models to their results.\n\t *\n\t * For each model, it takes the latest result.\n\t *\n\t * @returns {Object.<string, number>}\n\t */\n\tgetTargeting() {\n\t\tconst latestResults = {};\n\t\tthis.predictions\n\t\t\t.filter(pred => this.targetedModelNames.has(pred.modelName))\n\t\t\t.forEach((pred) => {\n\t\t\t\tlatestResults[pred.modelName] = pred.result;\n\t\t\t});\n\t\treturn latestResults;\n\t}\n\n\t/**\n\t * Get prediction by modelName and callId.\n\t *\n\t * @param {string} modelName\n\t * @param {(number|string)} callId\n\t * @returns {PredictionDefinition}\n\t */\n\tgetPrediction(modelName, callId) {\n\t\treturn this.getPredictions(modelName).find(pred => pred.callId === callId);\n\t}\n\n\t/**\n\t * Returns predictions optionally filtered by model name.\n\t *\n\t * If model name is given, it returns all predictions with models matching.\n\t * Model matches when raw name (without version) is matched.\n\t *\n\t * @param {string} [modelName]\n\t * @returns {PredictionDefinition[]}\n\t */\n\tgetPredictions(modelName) {\n\t\tconst separator = ':';\n\t\tif (modelName) {\n\t\t\treturn this.predictions.filter(\n\t\t\t\tpred => pred.modelName.split(separator)[0] === modelName.split(separator)[0]\n\t\t\t);\n\t\t}\n\t\treturn this.predictions;\n\t}\n\n\t/**\n\t * Returns response status (one of: failure, not_used, on_time, timeout, too_late or undefined);\n\t *\n\t * If callId is not supplied, the latest response without a specific key is returned.\n\t *\n\t * @param {number|string} [callId] value passed as key for call\n\t * @returns {string}\n\t */\n\tgetResponseStatus(callId) {\n\t\tcallId = callId || this.callCounter;\n\t\treturn this.statuses[callId];\n\t}\n\n\t/**\n\t * Serializes all predictions\n\t * @param {number|string} [callId]\n\t * @returns {string}\n\t */\n\tserialize(callId) {\n\t\tlet { predictions } = this;\n\t\tif (callId !== undefined) {\n\t\t\tpredictions = predictions.filter(pred => pred.callId === callId);\n\t\t}\n\t\treturn predictions\n\t\t\t.map(pred => `${pred.modelName}|${pred.callId}=${pred.result}`)\n\t\t\t.join(';');\n\t}\n}\n\nexport const billTheLizard = new BillTheLizard();\n","import { context, utils } from '@wikia/ad-engine';\n\nconst logGroup = 'geo-edge';\nconst scriptDomainId = 'd3b02estmut877';\n\n/**\n * Injects Geo Edge Site Side Protection script\n * @returns {Promise}\n */\nfunction loadScript() {\n\tconst geoEdgeLibraryUrl = `//${scriptDomainId}.cloudfront.net/grumi-ip.js`;\n\n\treturn utils.scriptLoader.loadScript(geoEdgeLibraryUrl, 'text/javascript', true, 'first');\n}\n\n/**\n * GeoEdge service handler\n */\nclass GeoEdge {\n\t/**\n\t * Requests service and injects script tag\n\t * @returns {Promise}\n\t */\n\tcall() {\n\t\tconst geoEdgeKey = context.get('services.geoEdge.id');\n\t\tconst geoEdgeConfig = context.get('services.geoEdge.config');\n\n\t\tif (!context.get('services.geoEdge.enabled') || !geoEdgeKey) {\n\t\t\tutils.logger(logGroup, 'disabled');\n\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tutils.logger(logGroup, 'loading');\n\t\twindow.grumi = {\n\t\t\tcfg: geoEdgeConfig,\n\t\t\tkey: geoEdgeKey\n\t\t};\n\n\t\treturn loadScript().then(() => {\n\t\t\tutils.logger(logGroup, 'ready');\n\t\t});\n\t}\n}\n\nexport const geoEdge = new GeoEdge();\n","import { context, utils } from '@wikia/ad-engine';\n\nconst logGroup = 'krux';\n\n/**\n * Injects Krux script\n * @returns {Promise}\n */\nfunction loadScript() {\n\tconst kruxId = context.get('services.krux.id');\n\tconst kruxLibraryUrl = `//cdn.krxd.net/controltag?confid=${kruxId}`;\n\n\treturn utils.scriptLoader.loadScript(kruxLibraryUrl, 'text/javascript', true, 'first', {\n\t\tid: 'krux-control-tag'\n\t});\n}\n\n/**\n * Gets Krux data from localStorage\n * @param {string} key\n * @returns {string}\n */\nfunction getKruxData(key) {\n\tif (window.localStorage) {\n\t\treturn window.localStorage[key];\n\t} else if (window.navigator.cookieEnabled) {\n\t\tconst match = document.cookie.match(`${key}=([^;]*)`);\n\n\t\treturn (match && decodeURI(match[1])) || '';\n\t}\n\n\treturn '';\n}\n\nwindow.Krux = window.Krux || function (...args) {\n\twindow.Krux.q.push(args);\n};\nwindow.Krux.q = window.Krux.q || [];\n\n/**\n * Krux service handler\n */\nclass Krux {\n\t/**\n\t * Requests service, saves user id and segments in context and exports page level params\n\t * @returns {Promise}\n\t */\n\tcall() {\n\t\tif (!context.get('services.krux.enabled') || !context.get('options.trackingOptIn')) {\n\t\t\tutils.logger(logGroup, 'disabled');\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tutils.logger(logGroup, 'loading');\n\t\treturn loadScript().then(() => {\n\t\t\tthis.exportPageParams();\n\t\t\tthis.importUserData();\n\t\t});\n\t}\n\n\t/**\n\t * Export page level params to Krux\n\t * @returns {void}\n\t */\n\texportPageParams() {\n\t\tObject.keys(context.get('targeting')).forEach((key) => {\n\t\t\tconst value = context.get(`targeting.${key}`);\n\n\t\t\tif (value) {\n\t\t\t\twindow[`kruxDartParam_${key}`] = value;\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Imports Krux data from localStorage\n\t * @returns {void}\n\t */\n\timportUserData() {\n\t\tconst user = getKruxData('kxuser');\n\t\tconst segments = getKruxData('kxsegs');\n\n\t\tcontext.set('targeting.kuid', user || null);\n\t\tcontext.set('targeting.ksg', segments ? segments.split(',') : []);\n\t\tutils.logger(logGroup, 'data set', user, segments);\n\t}\n\n\t/**\n\t * Returns Krux user ID\n\t * @returns {string}\n\t */\n\tgetUserId() {\n\t\treturn context.get('targeting.kuid') || null;\n\t}\n\n\t/**\n\t * Returns Krux segments\n\t * @returns {string[]}\n\t */\n\tgetSegments() {\n\t\treturn context.get('targeting.ksg') || [];\n\t}\n}\n\nexport const krux = new Krux();\n","import { context, events, utils } from '@wikia/ad-engine';\n\nconst logGroup = 'moat-yi';\n\nevents.registerEvent('MOAT_YI_READY');\n\n/**\n * Injects MOAT YI script\n * @returns {Promise}\n */\nfunction loadScript() {\n\tconst partnerCode = context.get('services.moatYi.partnerCode');\n\tconst url = `//z.moatads.com/${partnerCode}/yi.js`;\n\n\treturn utils.scriptLoader.loadScript(url, 'text/javascript', true, 'first');\n}\n\n/**\n * MOAT YI service handler\n */\nclass MoatYi {\n\t/**\n\t * Requests MOAT YI service and saves page level data in targeting\n\t * @returns {Promise}\n\t */\n\tcall() {\n\t\tif (!context.get('services.moatYi.enabled') || !context.get('services.moatYi.partnerCode')) {\n\t\t\tutils.logger(logGroup, 'disabled');\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tlet moatYeildReadyResolve;\n\t\tconst promise = new Promise((resolve) => {\n\t\t\tmoatYeildReadyResolve = resolve;\n\t\t});\n\t\tutils.logger(logGroup, 'loading');\n\t\twindow.moatYieldReady = () => {\n\t\t\tthis.importPageParams();\n\t\t\tmoatYeildReadyResolve();\n\t\t};\n\t\tcontext.set('targeting.m_data', 'waiting');\n\n\t\tloadScript().then(() => {\n\t\t\tutils.logger(logGroup, 'ready');\n\t\t});\n\n\t\treturn promise;\n\t}\n\n\t/**\n\t * Adds page params to targeting\n\t * @returns {void}\n\t */\n\timportPageParams() {\n\t\tif (window.moatPrebidApi && typeof window.moatPrebidApi.getMoatTargetingForPage === 'function') {\n\t\t\tconst pageParams = window.moatPrebidApi.getMoatTargetingForPage() || {};\n\n\t\t\tcontext.set('targeting.m_data', pageParams.m_data);\n\t\t\tevents.emit(events.MOAT_YI_READY, `m_data=${pageParams.m_data}`);\n\t\t\tutils.logger(logGroup, 'moatYieldReady', pageParams);\n\t\t}\n\t}\n}\n\nexport const moatYi = new MoatYi();\n","export * from './bill-the-lizard';\nexport * from './geo-edge';\nexport * from './krux';\nexport * from './moat-yi';\n"],"sourceRoot":""}